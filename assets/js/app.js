// Generated by CoffeeScript 1.12.5
(function() {
  angular.module('app', []).controller('HomeController', [
    '$scope', '$http', 'util', function($scope, $http, util) {
      var $animate_logo, $app_menu, $articles, $body, $left_eye, $repos, $right_eye, github_user_name, init_animate_logo, init_lazyload, request_github_api;
      $body = $('html, body');
      $app_menu = $('.app.menu');
      $repos = $('.repo-groups');
      $articles = $('.articles.segment');
      $animate_logo = $('.animate-logo');
      $left_eye = $animate_logo.find('img.left.eye');
      $right_eye = $animate_logo.find('img.right.eye');
      github_user_name = $("meta[name='github-username']").attr('content');
      $scope.show_full_repo_list = false;
      $scope.goTo = function(target) {
        var scroll_to;
        scroll_to = void 0;
        if (target === 'repos') {
          scroll_to = $repos;
        } else if (target === 'articles') {
          scroll_to = $articles;
        }
        if (scroll_to) {
          $body.animate({
            scrollTop: scroll_to.offset().top - $app_menu.height()
          }, 500);
        }
      };
      $scope.date_to_now = function(date) {
        return moment(date).toNow();
      };
      init_animate_logo = function() {
        var left_eye_anchor, left_eye_init_offset, left_eye_move_range, right_eye_anchor, right_eye_init_offset, right_eye_move_range;
        left_eye_anchor = [.429, .497];
        left_eye_init_offset = [.003, .014];
        left_eye_move_range = [.023, .023];
        right_eye_anchor = [.665, .495];
        right_eye_init_offset = [0, .015];
        right_eye_move_range = [.02, .02];
        return $(document).on('mousemove touchmove', function(e) {
          var base_offset, height, left_eye_angle, left_eye_move_x, left_eye_move_y, right_eye_angle, right_eye_move_x, right_eye_move_y, touch, width, x, y;
          if (e.pageX !== void 0) {
            x = e.pageX;
            y = e.pageY;
          } else {
            touch = e.touches[0];
            if (touch) {
              x = touch.pageX;
              y = touch.pageY;
            } else {
              return;
            }
          }
          base_offset = $animate_logo.offset();
          width = $animate_logo.width();
          height = $animate_logo.height();
          if ($body.scrollTop() >= base_offset.top + height - $app_menu.height()) {
            return;
          }
          left_eye_angle = Math.atan2(y - (left_eye_anchor[1] * height + base_offset.top), x - (left_eye_anchor[0] * width + base_offset.left));
          left_eye_move_x = (left_eye_move_range[0] * Math.cos(left_eye_angle) - left_eye_init_offset[0]) * width;
          left_eye_move_y = (left_eye_move_range[1] * Math.sin(left_eye_angle) - left_eye_init_offset[1]) * height;
          right_eye_angle = Math.atan2(y - (right_eye_anchor[1] * height + base_offset.top), x - (right_eye_anchor[0] * width + base_offset.left));
          right_eye_move_x = (right_eye_move_range[0] * Math.cos(right_eye_angle) - right_eye_init_offset[0]) * width;
          right_eye_move_y = (right_eye_move_range[1] * Math.sin(right_eye_angle) - right_eye_init_offset[1]) * height;
          $left_eye.css({
            transform: "translate(" + left_eye_move_x + "px, " + left_eye_move_y + "px)"
          });
          return $right_eye.css({
            transform: "translate(" + right_eye_move_x + "px, " + right_eye_move_y + "px)"
          });
        });
      };
      init_lazyload = function() {
        var lazyload_config;
        lazyload_config = {
          load: function() {
            var $this;
            $this = $(this);
            return $this.removeClass('lazy').addClass($this.data('loaded-class'));
          }
        };
        $(".repo-groups img.lazy").lazyload(lazyload_config);
        return $(".articles.segment img.lazy").lazyload(lazyload_config);
      };
      request_github_api = function() {
        return $http.get("https://api.github.com/users/" + github_user_name + "/repos").then(function(response) {
          var i, len, ref, repo, repos;
          repos = {};
          ref = response.data;
          for (i = 0, len = ref.length; i < len; i++) {
            repo = ref[i];
            repos[repo.name] = repo;
          }
          return $scope.repos = repos;
        }, function(response) {
          return console.error(util.formatResponseError(response));
        });
      };
      init_animate_logo();
      init_lazyload();
      return request_github_api();
    }
  ]);

}).call(this);

//# sourceMappingURL=app.js.map
